
services:

  api-gateway:
    build: api-gateway
    hostname: api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - catalogs-service
      - members-service
      - fines-service
      - loans-service


  catalogs-service:
    build: catalogs-service
    hostname: catalogs-service
    container_name: catalogs-service
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mysql1:
        condition: service_healthy

  members-service:
    build: members-service
    hostname: members-service
    container_name: members-service
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres1:
        condition: service_healthy

  fines-service:
    build: fines-service
    hostname: fines-service
    container_name: fines-service
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mysql2:
        condition: service_healthy


  loans-service:
    build: loans-service
    hostname: loans-service
    container_name: loans-service
    ports:
      - "8084:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongodb
      - catalogs-service
      - members-service
      - fines-service

  mysql1:
    image: mysql:5.7
    container_name: mysql1-catalogs
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=catalogs-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    volumes:
      - ./data/mysql1:/var/lib/mysql1
      - ./data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
            "CMD",
            "mysqladmin",
            "ping",
            "-uuser",
            "-ppwd",
            "-h",
            "localhost",
        ]
      interval: 10s
      timeout: 5s
      retries: 10


  mysql2:
    image: mysql:5.7
    container_name: mysql2-fines
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=fines-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    volumes:
      - ./data/mysql2:/var/lib/mysql2
      - ./data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
            "CMD",
            "mysqladmin",
            "ping",
            "-uuser",
            "-ppwd",
            "-h",
            "localhost",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres1:
    image: postgres:latest # version PostgreSQL 17.4
    container_name: postgres-members
    hostname: postgres1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - PGUSER=user
      - POSTGRES_PASSWORD=pwd
      - POSTGRES_DB=members-db
    healthcheck:
      test: "pg_isready -h postgres1"
      interval: 10s
      timeout: 5s
      retries: 10

  phpmyadmin1:
    image: phpmyadmin:5.2.0
    container_name: phpmyadmin1-catalogs
    links:
      - mysql1
    restart: always
    ports:
      - 5014:80
    environment:
      - PMA_ARBITRARY=1

  phpmyadmin2:
    image: phpmyadmin:5.2.0
    container_name: phpmyadmin2-fines
    links:
      - mysql2
    restart: always
    ports:
      - 5015:80
    environment:
      - PMA_ARBITRARY=1


  pgadmin1:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-members
    restart: always
    ports:
      - 9000:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@phuong.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - postgres1




  #Mongo
  mongodb:
    image: mongo
    container_name: mongo_db
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pwd

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8085:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=user
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pwd
      - ME_CONFIG_MONGODB_SERVER=mongodb

volumes:
  mongo: {}



